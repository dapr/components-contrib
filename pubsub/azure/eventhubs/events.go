package eventhubs

import (
	"context"
	"strconv"
	"sync"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/messaging/azeventhubs"
	"github.com/spf13/cast"
	"golang.org/x/exp/maps"

	"github.com/dapr/components-contrib/pubsub"
)

const (
	// Event Hubs SystemProperties names for metadata passthrough.
	sysPropSequenceNumber             = "x-opt-sequence-number"
	sysPropEnqueuedTime               = "x-opt-enqueued-time"
	sysPropOffset                     = "x-opt-offset"
	sysPropPartitionID                = "x-opt-partition-id"
	sysPropPartitionKey               = "x-opt-partition-key"
	sysPropIotHubDeviceConnectionID   = "iothub-connection-device-id"
	sysPropIotHubAuthGenerationID     = "iothub-connection-auth-generation-id"
	sysPropIotHubConnectionAuthMethod = "iothub-connection-auth-method"
	sysPropIotHubConnectionModuleID   = "iothub-connection-module-id"
	sysPropIotHubEnqueuedTime         = "iothub-enqueuedtime"
	sysPropMessageID                  = "message-id"
)

// Pool of map[string]string that we can use to optimize memory usage
var metadataPool = sync.Pool{
	New: func() any {
		// Initial capacity is 5 which is the number of properties we normally find in a message
		// The map can expand as needed, and when it's added back to the pool, we'll keep the larger size
		m := make(map[string]string, 5)
		return &m
	},
}

func subscribeHandler(ctx context.Context, topic string, getAllProperties bool, handler pubsub.Handler) func(e *azeventhubs.ReceivedEventData) error {
	return func(e *azeventhubs.ReceivedEventData) error {
		md := metadataPool.Get().(*map[string]string)
		maps.Clear(*md)
		defer metadataPool.Put(md)

		res := pubsub.NewMessage{
			Data:     e.Body,
			Topic:    topic,
			Metadata: *md,
		}

		res.Metadata[sysPropSequenceNumber] = strconv.FormatInt(e.SequenceNumber, 10)
		if e.EnqueuedTime != nil {
			res.Metadata[sysPropEnqueuedTime] = e.EnqueuedTime.Format(time.RFC3339)
		}
		if e.Offset != nil {
			res.Metadata[sysPropOffset] = strconv.FormatInt(*e.Offset, 10)
		}
		if e.PartitionKey != nil {
			res.Metadata[sysPropPartitionKey] = *e.PartitionKey
		}
		if e.MessageID != nil && *e.MessageID != "" {
			res.Metadata[sysPropMessageID] = *e.MessageID
		}

		// Iterate through the system properties looking for those coming from IoT Hub
		for k, v := range e.SystemProperties {
			switch k {
			// The following metadata properties are only present if event was generated by Azure IoT Hub.
			case sysPropIotHubDeviceConnectionID,
				sysPropIotHubAuthGenerationID,
				sysPropIotHubConnectionAuthMethod,
				sysPropIotHubConnectionModuleID,
				sysPropIotHubEnqueuedTime:
				addPropertyToMetadata(k, v, res.Metadata)
			default:
				// nop
			}
		}

		// Added properties if any (includes application properties from Azure IoT Hub)
		if getAllProperties && len(e.Properties) > 0 {
			for k, v := range e.Properties {
				addPropertyToMetadata(k, v, res.Metadata)
			}
		}

		return handler(ctx, &res)
	}
}

// Adds a property to the response metadata
func addPropertyToMetadata(key string, value any, md map[string]string) {
	switch v := value.(type) {
	case *time.Time:
		if v != nil {
			md[key] = v.Format(time.RFC3339)
		}
	case time.Time:
		md[key] = v.Format(time.RFC3339)
	default:
		str, err := cast.ToStringE(value)
		if err == nil {
			md[key] = str
		}
	}
}
