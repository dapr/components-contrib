version: '3.9'

# Use a YAML reference to define VAULT_TOKEN and DOCKER_IMAGE only once
x-common-values:
  # This should match tests/config/secrestore/hashicorp/vault/hashicorp-vault.yaml
  # This should match .github/infrastructure/conformance/hashicorp/vault_token_file.txt
  vault_token: &VAULT_TOKEN "vault-dev-root-token-id"
  # Reuse the same docker image to save on resources and because the base vault image
  # has everything we need for seeding the initial key values too.
  vault_docker_image: &VAULT_DOCKER_IMAGE vault:1.12.1

services:
  hashicorp_vault:
    image: *VAULT_DOCKER_IMAGE
    ports:
      - '8200:8200'
    cap_add:
      - IPC_LOCK
    environment:
      # Move vault's dev-mode self-signed TLS listener to another port so we can use the default one for
      # our own listener with our own self-signed certificate.
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:7200"
      VAULT_DEV_ROOT_TOKEN_ID: *VAULT_TOKEN
    volumes:
      - ../vaultConfig:/vault/config/:ro
      - ../certificates:/certificates:ro
    # Force vault to use TLS/HTTPS in dev mode
    entrypoint: vault server -dev-tls -config /vault/config/vault_server.hcl

  # We define a aux. service to seed the expected conformance secrets to vault
  seed_conformance_secrets:
    image: *VAULT_DOCKER_IMAGE
    depends_on:
     - hashicorp_vault
    environment:
      VAULT_TOKEN : *VAULT_TOKEN
      # We are using HTTPS
      VAULT_ADDR: https://hashicorp_vault:8200/
      # Force the server to use our own certificate
      VAULT_SKIP_VERIFY: 'false'
      VAULT_CACERT:  /certificates/cert.pem
    volumes:
      - ../../../../../../../../.github/infrastructure/conformance/hashicorp:/setup:ro
      - ../certificates:/certificates:ro
    entrypoint: /setup/setup-hashicorp-vault-secrets.sh
    
