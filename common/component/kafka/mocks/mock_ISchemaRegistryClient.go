// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/patrick.assuied/go/pkg/mod/github.com/riferrei/srclient@v0.6.0/schemaRegistryClient.go

// Package mock_srclient is a generated GoMock package.
package mock_srclient

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	srclient "github.com/riferrei/srclient"
)

// MockISchemaRegistryClient is a mock of ISchemaRegistryClient interface.
type MockISchemaRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockISchemaRegistryClientMockRecorder
}

// MockISchemaRegistryClientMockRecorder is the mock recorder for MockISchemaRegistryClient.
type MockISchemaRegistryClientMockRecorder struct {
	mock *MockISchemaRegistryClient
}

// NewMockISchemaRegistryClient creates a new mock instance.
func NewMockISchemaRegistryClient(ctrl *gomock.Controller) *MockISchemaRegistryClient {
	mock := &MockISchemaRegistryClient{ctrl: ctrl}
	mock.recorder = &MockISchemaRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISchemaRegistryClient) EXPECT() *MockISchemaRegistryClientMockRecorder {
	return m.recorder
}

// CachingEnabled mocks base method.
func (m *MockISchemaRegistryClient) CachingEnabled(value bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CachingEnabled", value)
}

// CachingEnabled indicates an expected call of CachingEnabled.
func (mr *MockISchemaRegistryClientMockRecorder) CachingEnabled(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachingEnabled", reflect.TypeOf((*MockISchemaRegistryClient)(nil).CachingEnabled), value)
}

// ChangeSubjectCompatibilityLevel mocks base method.
func (m *MockISchemaRegistryClient) ChangeSubjectCompatibilityLevel(subject string, compatibility srclient.CompatibilityLevel) (*srclient.CompatibilityLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSubjectCompatibilityLevel", subject, compatibility)
	ret0, _ := ret[0].(*srclient.CompatibilityLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSubjectCompatibilityLevel indicates an expected call of ChangeSubjectCompatibilityLevel.
func (mr *MockISchemaRegistryClientMockRecorder) ChangeSubjectCompatibilityLevel(subject, compatibility interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSubjectCompatibilityLevel", reflect.TypeOf((*MockISchemaRegistryClient)(nil).ChangeSubjectCompatibilityLevel), subject, compatibility)
}

// CodecCreationEnabled mocks base method.
func (m *MockISchemaRegistryClient) CodecCreationEnabled(value bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CodecCreationEnabled", value)
}

// CodecCreationEnabled indicates an expected call of CodecCreationEnabled.
func (mr *MockISchemaRegistryClientMockRecorder) CodecCreationEnabled(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodecCreationEnabled", reflect.TypeOf((*MockISchemaRegistryClient)(nil).CodecCreationEnabled), value)
}

// CreateSchema mocks base method.
func (m *MockISchemaRegistryClient) CreateSchema(subject, schema string, schemaType srclient.SchemaType, references ...srclient.Reference) (*srclient.Schema, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subject, schema, schemaType}
	for _, a := range references {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchema", varargs...)
	ret0, _ := ret[0].(*srclient.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockISchemaRegistryClientMockRecorder) CreateSchema(subject, schema, schemaType interface{}, references ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subject, schema, schemaType}, references...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockISchemaRegistryClient)(nil).CreateSchema), varargs...)
}

// DeleteSubject mocks base method.
func (m *MockISchemaRegistryClient) DeleteSubject(subject string, permanent bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubject", subject, permanent)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubject indicates an expected call of DeleteSubject.
func (mr *MockISchemaRegistryClientMockRecorder) DeleteSubject(subject, permanent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubject", reflect.TypeOf((*MockISchemaRegistryClient)(nil).DeleteSubject), subject, permanent)
}

// DeleteSubjectByVersion mocks base method.
func (m *MockISchemaRegistryClient) DeleteSubjectByVersion(subject string, version int, permanent bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubjectByVersion", subject, version, permanent)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubjectByVersion indicates an expected call of DeleteSubjectByVersion.
func (mr *MockISchemaRegistryClientMockRecorder) DeleteSubjectByVersion(subject, version, permanent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubjectByVersion", reflect.TypeOf((*MockISchemaRegistryClient)(nil).DeleteSubjectByVersion), subject, version, permanent)
}

// GetCompatibilityLevel mocks base method.
func (m *MockISchemaRegistryClient) GetCompatibilityLevel(subject string, defaultToGlobal bool) (*srclient.CompatibilityLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibilityLevel", subject, defaultToGlobal)
	ret0, _ := ret[0].(*srclient.CompatibilityLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibilityLevel indicates an expected call of GetCompatibilityLevel.
func (mr *MockISchemaRegistryClientMockRecorder) GetCompatibilityLevel(subject, defaultToGlobal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibilityLevel", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetCompatibilityLevel), subject, defaultToGlobal)
}

// GetGlobalCompatibilityLevel mocks base method.
func (m *MockISchemaRegistryClient) GetGlobalCompatibilityLevel() (*srclient.CompatibilityLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalCompatibilityLevel")
	ret0, _ := ret[0].(*srclient.CompatibilityLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalCompatibilityLevel indicates an expected call of GetGlobalCompatibilityLevel.
func (mr *MockISchemaRegistryClientMockRecorder) GetGlobalCompatibilityLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalCompatibilityLevel", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetGlobalCompatibilityLevel))
}

// GetLatestSchema mocks base method.
func (m *MockISchemaRegistryClient) GetLatestSchema(subject string) (*srclient.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSchema", subject)
	ret0, _ := ret[0].(*srclient.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSchema indicates an expected call of GetLatestSchema.
func (mr *MockISchemaRegistryClientMockRecorder) GetLatestSchema(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSchema", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetLatestSchema), subject)
}

// GetSchema mocks base method.
func (m *MockISchemaRegistryClient) GetSchema(schemaID int) (*srclient.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", schemaID)
	ret0, _ := ret[0].(*srclient.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockISchemaRegistryClientMockRecorder) GetSchema(schemaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetSchema), schemaID)
}

// GetSchemaByVersion mocks base method.
func (m *MockISchemaRegistryClient) GetSchemaByVersion(subject string, version int) (*srclient.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaByVersion", subject, version)
	ret0, _ := ret[0].(*srclient.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByVersion indicates an expected call of GetSchemaByVersion.
func (mr *MockISchemaRegistryClientMockRecorder) GetSchemaByVersion(subject, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByVersion", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetSchemaByVersion), subject, version)
}

// GetSchemaVersions mocks base method.
func (m *MockISchemaRegistryClient) GetSchemaVersions(subject string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaVersions", subject)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaVersions indicates an expected call of GetSchemaVersions.
func (mr *MockISchemaRegistryClientMockRecorder) GetSchemaVersions(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersions", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetSchemaVersions), subject)
}

// GetSubjects mocks base method.
func (m *MockISchemaRegistryClient) GetSubjects() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjects")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjects indicates an expected call of GetSubjects.
func (mr *MockISchemaRegistryClientMockRecorder) GetSubjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjects", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetSubjects))
}

// GetSubjectsIncludingDeleted mocks base method.
func (m *MockISchemaRegistryClient) GetSubjectsIncludingDeleted() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectsIncludingDeleted")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectsIncludingDeleted indicates an expected call of GetSubjectsIncludingDeleted.
func (mr *MockISchemaRegistryClientMockRecorder) GetSubjectsIncludingDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectsIncludingDeleted", reflect.TypeOf((*MockISchemaRegistryClient)(nil).GetSubjectsIncludingDeleted))
}

// IsSchemaCompatible mocks base method.
func (m *MockISchemaRegistryClient) IsSchemaCompatible(subject, schema, version string, schemaType srclient.SchemaType, references ...srclient.Reference) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subject, schema, version, schemaType}
	for _, a := range references {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSchemaCompatible", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSchemaCompatible indicates an expected call of IsSchemaCompatible.
func (mr *MockISchemaRegistryClientMockRecorder) IsSchemaCompatible(subject, schema, version, schemaType interface{}, references ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subject, schema, version, schemaType}, references...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSchemaCompatible", reflect.TypeOf((*MockISchemaRegistryClient)(nil).IsSchemaCompatible), varargs...)
}

// LookupSchema mocks base method.
func (m *MockISchemaRegistryClient) LookupSchema(subject, schema string, schemaType srclient.SchemaType, references ...srclient.Reference) (*srclient.Schema, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subject, schema, schemaType}
	for _, a := range references {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupSchema", varargs...)
	ret0, _ := ret[0].(*srclient.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupSchema indicates an expected call of LookupSchema.
func (mr *MockISchemaRegistryClientMockRecorder) LookupSchema(subject, schema, schemaType interface{}, references ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subject, schema, schemaType}, references...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSchema", reflect.TypeOf((*MockISchemaRegistryClient)(nil).LookupSchema), varargs...)
}

// ResetCache mocks base method.
func (m *MockISchemaRegistryClient) ResetCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetCache")
}

// ResetCache indicates an expected call of ResetCache.
func (mr *MockISchemaRegistryClientMockRecorder) ResetCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCache", reflect.TypeOf((*MockISchemaRegistryClient)(nil).ResetCache))
}

// SetBearerToken mocks base method.
func (m *MockISchemaRegistryClient) SetBearerToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBearerToken", token)
}

// SetBearerToken indicates an expected call of SetBearerToken.
func (mr *MockISchemaRegistryClientMockRecorder) SetBearerToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBearerToken", reflect.TypeOf((*MockISchemaRegistryClient)(nil).SetBearerToken), token)
}

// SetCredentials mocks base method.
func (m *MockISchemaRegistryClient) SetCredentials(username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCredentials", username, password)
}

// SetCredentials indicates an expected call of SetCredentials.
func (mr *MockISchemaRegistryClientMockRecorder) SetCredentials(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCredentials", reflect.TypeOf((*MockISchemaRegistryClient)(nil).SetCredentials), username, password)
}

// SetTimeout mocks base method.
func (m *MockISchemaRegistryClient) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockISchemaRegistryClientMockRecorder) SetTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockISchemaRegistryClient)(nil).SetTimeout), timeout)
}
