# ------------------------------------------------------------
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------

name: Components Conformance Tests

on:
  repository_dispatch:
    types: [conformance-test]
  workflow_dispatch:
  merge_group:
  schedule:
    - cron: '0 */8 * * *'
  push:
    branches:
    - 'release-*'
  pull_request:
    branches:
      - master
      - 'release-*'

jobs:
  # Based on whether this is a PR or a scheduled run, we will run a different
  # subset of the conformance tests. This allows all the tests not requiring
  # secrets to be executed on pull requests.
  generate-matrix:
    runs-on: ubuntu-22.04
    steps:
    - name: Parse repository_dispatch payload
      if: github.event_name == 'repository_dispatch'
      working-directory: ${{ github.workspace }}
      run: |
        if [ ${{ github.event.client_payload.command }} = "ok-to-test" ]; then
          echo "CHECKOUT_REF=${{ github.event.client_payload.pull_head_ref }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.client_payload.issue.number }}" >> $GITHUB_ENV
        fi

    - name: Generate the test matrix
      id: generate-matrix
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Do not generate include tests on PRs
          node .github/scripts/test-info.mjs conformance false
        else
          # Include cloud tests
          node .github/scripts/test-info.mjs conformance true
        fi

    - name: Create PR comment
      if: env.PR_NUMBER != ''
      uses: artursouza/sticky-pull-request-comment@da9e86aa2a80e4ae3b854d251add33bd6baabcba
      with:
        header: ${{ github.run_id }}
        number: ${{ env.PR_NUMBER }}
        GITHUB_TOKEN: ${{ secrets.DAPR_BOT_TOKEN }}
        message: |
          # Components conformance test

          🔗 **[Link to Action run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**

          Commit ref: ${{ env.CHECKOUT_REF }}

    outputs:
      test-matrix: ${{ steps.generate-matrix.outputs.test-matrix }}

  conformance:
    name: ${{ matrix.component }} conformance
    runs-on: ubuntu-22.04
    env:
      UNIQUE_ID: ${{github.run_id}}-${{github.run_attempt}}
    defaults:
      run:
        shell: bash
    needs: generate-matrix

    strategy:
      fail-fast: false # Keep running even if one component fails
      matrix: ${{ fromJson(needs.generate-matrix.outputs.test-matrix) }}

    steps:
    - name: Set default payload repo and ref
      working-directory: ${{ github.workspace }}
      run: |
        echo "CHECKOUT_REPO=${{ github.repository }}" >> $GITHUB_ENV
        echo "CHECKOUT_REF=${{ github.ref }}" >> $GITHUB_ENV

    - name: Parse repository_dispatch payload
      if: github.event_name == 'repository_dispatch'
      working-directory: ${{ github.workspace }}
      run: |
        if [ ${{ github.event.client_payload.command }} = "ok-to-test" ]; then
          echo "CHECKOUT_REPO=${{ github.event.client_payload.pull_head_repo }}" >> $GITHUB_ENV
          echo "CHECKOUT_REF=${{ github.event.client_payload.pull_head_ref }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.client_payload.issue.number }}" >> $GITHUB_ENV
        fi

    - name: Check out code onto GOPATH
      uses: actions/checkout@v3
      with:
        repository: ${{ env.CHECKOUT_REPO }}
        ref: ${{ env.CHECKOUT_REF }}

    - name: Setup test output
      run: |
        export TEST_OUTPUT_FILE_PREFIX=$GITHUB_WORKSPACE/test_report
        echo "TEST_OUTPUT_FILE_PREFIX=$TEST_OUTPUT_FILE_PREFIX" >> $GITHUB_ENV

    - uses: Azure/login@v1
      if: matrix.required-secrets != ''
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Set this GitHub secret to your KeyVault, and grant the KeyVault policy to your Service Principal:
    #    az keyvault set-policy -n $AZURE_KEYVAULT --secret-permissions get list --spn $SPN_CLIENT_ID
    # Using az cli to query keyvault as Azure/get-keyvault-secrets@v1 is deprecated
    - name: Setup secrets
      if: matrix.required-secrets != ''
      env:
        VAULT_NAME: ${{ secrets.AZURE_KEYVAULT }}
      run: |
        secrets="${{ matrix.required-secrets }}"
        for secretName in $(echo -n $secrets | tr ',' ' '); do
          value=$(az keyvault secret show \
            --name $secretName \
            --vault-name $VAULT_NAME \
            --query value \
            --output tsv)
          echo "::add-mask::$value"
          echo "$secretName=$value" >> $GITHUB_OUTPUT
          echo "$secretName=$value" >> $GITHUB_ENV
        done

    # Download the required certificates into files, and set env var pointing to their names
    - name: Setup certs
      if: matrix.required-certs != ''
      run: |
        for CERT_NAME in $(echo "${{ matrix.required-certs }}" | sed 's/,/ /g'); do
          CERT_FILE=$(mktemp --suffix .pfx)
          echo "Downloading cert $CERT_NAME into file $CERT_FILE"
          rm $CERT_FILE && \
            az keyvault secret download --vault-name ${{ secrets.AZURE_KEYVAULT }} --name $CERT_NAME --encoding base64 --file $CERT_FILE
          echo 'Setting $CERT_NAME to' "$CERT_FILE"
          echo "$CERT_NAME=$CERT_FILE" >> $GITHUB_ENV
        done

    - name: Get current time
      run: |
        echo "CURRENT_TIME=$(date --rfc-3339=date)" >> ${GITHUB_ENV}

    - name: Setup Terraform
      if: matrix.require-terraform == 'true'
      uses: hashicorp/setup-terraform@v2

    - name: Set Cloudflare env vars
      if: matrix.require-cloudflare-credentials == 'true'
      run: |
        echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> $GITHUB_ENV
        echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV

    - name: Set AWS env vars
      if: matrix.require-aws-credentials == 'true'
      run: |
        echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      if: matrix.require-aws-credentials == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-west-1

    - name: Run setup script
      if: matrix.setup-script != ''
      run: .github/scripts/${{ matrix.setup-script }}

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.3.0
      with:
        mongodb-version: 4.2
        mongodb-replica-set: test-rs
      if: contains(matrix.component, 'mongodb')

    - name: Install Node.js ${{ matrix.nodejs-version }}
      if: ${{ matrix.nodejs-version != '' }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.nodejs-version }}

    - name: Check Cloudflare Workers code
      if: contains(matrix.component, 'cloudflare')
      run: |
        # Build the Worker
        (
          cd internal/component/cloudflare/worker-src;
          npm ci;
          npm run build;
        )
        # Check no changes
        git diff --exit-code ./internal/component/cloudflare/workers/code \
          || (echo "The source code of the Cloudflare Worker has changed, but the Worker has not been recompiled. Please re-compile the Worker by running 'npm ci && npm run build' in 'internal/component/cloudflare/worker-src'" && exit 1)

    - name: Setup Cloudflare KV
      if: matrix.component == 'state.cloudflare.workerskv'
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        CloudflareWorkerName="daprconfkv${{ github.run_id }}${{ github.run_attempt }}"
        CloudflareKVNamespaceID=$( curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/storage/kv/namespaces" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data "{\"title\":\"${CloudflareWorkerName}\"}" \
            | jq -r ".result.id" )

        echo "CloudflareWorkerName=${CloudflareWorkerName}" >> $GITHUB_ENV
        echo "CloudflareAPIToken=${CLOUDFLARE_API_TOKEN}" >> $GITHUB_ENV
        echo "CloudflareAccountID=${CLOUDFLARE_ACCOUNT_ID}" >> $GITHUB_ENV
        echo "CloudflareKVNamespaceID=${CloudflareKVNamespaceID}" >> $GITHUB_ENV

    - name: Start KinD
      uses: helm/kind-action@v1.4.0
      if: contains(matrix.component, 'kubernetes')

    - name: Setup KinD test data
      if: contains(matrix.component, 'kubernetes')
      run: |
        kubectl apply -f tests/config/kind-data.yaml
        echo "NAMESPACE=default" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: Download Go dependencies
      run: |
        go mod download
        go install gotest.tools/gotestsum@latest

    - name: Generate Azure SQL DB name
      run: |
        # Use UUID with `-` stripped out for DB names to prevent collisions between workflows
        export AzureSqlServerDbName=$(cat /proc/sys/kernel/random/uuid | sed -E 's/-//g')
        echo "AzureSqlServerDbName=$AzureSqlServerDbName" >> $GITHUB_ENV
      if: contains(matrix.component, 'azure.sql')

    - name: Catch setup failures
      if: failure()
      run: |
        echo "CONFORMANCE_FAILURE=true" >> $GITHUB_ENV

    - name: Run tests
      continue-on-error: true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}  
      run: |
        set -e 
        KIND=$(echo ${{ matrix.component }} | cut -d. -f1)
        NAME=$(echo ${{ matrix.component }} | cut -d. -f2-)
        KIND_UPPER="$(tr '[:lower:]' '[:upper:]' <<< ${KIND:0:1})${KIND:1}"

        if [ "${KIND}" = "secretstores" ]; then
          KIND_UPPER=SecretStore
        fi

        echo "Running tests for Test${KIND_UPPER}Conformance/${KIND}/${NAME} ... "

        set +e
        gotestsum --jsonfile ${{ env.TEST_OUTPUT_FILE_PREFIX }}_conformance.json \
          --junitfile ${{ env.TEST_OUTPUT_FILE_PREFIX }}_conformance.xml --format standard-verbose -- \
          -p 2 -count=1 -timeout=15m -tags=conftests ./tests/conformance --run="Test${KIND_UPPER}Conformance/${NAME}"

        status=$?
        echo "Completed tests for Test${KIND_UPPER}Conformance/${KIND}/${NAME} ... "
        if test $status -ne 0; then
          echo "Setting CONFORMANCE_FAILURE"
          echo "CONFORMANCE_FAILURE=true" >> $GITHUB_ENV
        fi
        set -e

        # Fail the step if we found no test to run
        if grep -q "warning: no tests to run" ${{ env.TEST_OUTPUT_FILE_PREFIX }}_conformance.json ; then
          echo "::error:: No test was found for component ${{ matrix.component }}"
          exit -1
        fi

    - name: Cleanup Azure SQL test DB instance
      if: contains(matrix.component, 'azure.sql')
      continue-on-error: true
      run: |
        # Wait for the creation of the DB by the test to propagate to ARM, otherwise deletion succeeds as no-op.
        # The wait should be under 30s, but is capped at 1m as flakiness here results in an accumulation of expensive DB instances over time.
        # Also note that the deletion call only blocks until the request is process, do not rely on it for mutex on the same DB,
        # deletion may be ongoing in sequential runs.
        sleep 1m
        az sql db delete --resource-group ${{ env.AzureResourceGroupName }} --server ${{ env.AzureSqlServerName }} -n ${{ env.AzureSqlServerDbName }} --yes

    - name: Cleanup Cloudflare KV
      if: always() && matrix.component == 'state.cloudflare.workerskv'
      continue-on-error: true
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        # Delete the Worker
        curl -X DELETE "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/workers/scripts/${{ env.CloudflareWorkerName }}" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}"
        # Delete the KV namespace
        curl -X DELETE "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/storage/kv/namespaces/${{ env.CloudflareKVNamespaceID }}" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}"

    # Download the required certificates into files, and set env var pointing to their names
    - name: Clean up certs
      if: matrix.required-certs != ''
      run: |
        for CERT_NAME in $(echo "${{ matrix.required-certs }}" | sed 's/,/ /g'); do
          CERT_FILE=$(printenv $CERT_NAME)

          echo "Cleaning up the certificate file $CERT_FILE..."
          rm $CERT_FILE
        done

    - name: Terraform Destroy
      continue-on-error: true    
      run: terraform destroy -auto-approve -var="UNIQUE_ID=${{env.UNIQUE_ID}}" -var="TIMESTAMP=${{env.CURRENT_TIME}}"
      working-directory: "./.github/infrastructure/terraform/conformance/${{ matrix.terraform-dir }}"
      if: matrix.terraform-dir != ''

    - name: Check conformance test passed
      continue-on-error: false
      run: |
        echo "CONFORMANCE_FAILURE=$CONFORMANCE_FAILURE"
        if [[ -v CONFORMANCE_FAILURE ]]; then
          exit 1
        fi

    - name: Prepare test result info
      if: always()
      run: |
        mkdir -p tmp/result_files
        echo "Writing to tmp/result_files/${{ matrix.component }}.txt"
        if [[ "${{ env.CONFORMANCE_FAILURE }}" == "true" ]]; then
          echo "0" >> "tmp/result_files/${{ matrix.component }}.txt"
        else
          echo "1" >> "tmp/result_files/${{ matrix.component }}.txt"
        fi

    - name: Upload result files
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: result_files
        path: tmp/result_files
        retention-days: 1

    # Upload logs for test analytics to consume
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: ${{ matrix.component }}_conformance_test
        path: ${{ env.TEST_OUTPUT_FILE_PREFIX }}_conformance.*

    - name: Run destroy script
      if: always() && matrix.destroy-script != ''
      run: .github/scripts/${{ matrix.destroy-script }}

  post_job:
    name: Post-completion
    runs-on: ubuntu-latest
    if: always()
    needs:
      - conformance
      - generate-matrix
    steps:
      - name: Parse repository_dispatch payload
        if: github.event_name == 'repository_dispatch'
        working-directory: ${{ github.workspace }}
        run: |
          if [ ${{ github.event.client_payload.command }} = "ok-to-test" ]; then
            echo "CHECKOUT_REF=${{ github.event.client_payload.pull_head_ref }}" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.client_payload.issue.number }}" >> $GITHUB_ENV
          fi

      - name: Download test result artifact
        if: always() && env.PR_NUMBER != ''
        uses: actions/download-artifact@v3
        continue-on-error: true
        id: testresults
        with:
          name: result_files
          path: tmp/result_files

      - name: Build message
        if: always() && env.PR_NUMBER != ''
        # Abusing of the github-script action to be able to write this in JS
        uses: actions/github-script@v6
        with:
          script: |
            const prComponents = ('${{ needs.generate-matrix.outputs.pr-components }}' && JSON.parse('${{ needs.generate-matrix.outputs.pr-components }}')) || []
            const cronComponents = ('${{ needs.generate-matrix.outputs.cron-components }}' && JSON.parse('${{ needs.generate-matrix.outputs.cron-components }}')) || []
            const allComponents = [...prComponents, ...cronComponents]
            const basePath = '${{ steps.testresults.outputs.download-path }}'
            const testType = 'conformance'

            const fs = require('fs')
            const path = require('path')

            let message = `# Components ${testType} test

            🔗 **[Link to Action run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**

            Commit ref: ${{ env.CHECKOUT_REF }}`

            let allSuccess = true
            let allFound = true
            let notSuccess = []
            let notFound = []
            for (let i = 0; i < allComponents.length; i++) {
                let component = allComponents[i]
                if (!component) {
                    continue
                }
                if (typeof component == 'object') {
                    component = component.component
                }
                let found = false
                let success = false
                try {
                    let read = fs.readFileSync(path.join(basePath, component + '.txt'), 'utf8')
                    read = read.split('\n')[0]
                    switch (read) {
                        case '1':
                            found = true
                            success = true
                            break
                        case '0':
                            found = true
                            success = false
                    }
                } catch (e) {
                    // ignore errors, leave found = false
                }

                if (!found) {
                    allFound = false
                    notFound.push(component)
                }
                if (!success) {
                    allSuccess = false
                    notSuccess.push(component)
                }
            }

            if (allSuccess) {
                if (allFound) {
                    message += '\n\n' + `# ✅ All ${testType} tests passed

            All tests have reported a successful status` + '\n\n'
                } else {
                    message += '\n\n' + `# ⚠️ Some ${testType} tests did not report status

            Although there were no failures reported, some tests did not report a status:` + '\n\n'
                    for (let i = 0; i < notFound.length; i++) {
                        message += '- ' + notFound[i] + '\n'
                    }
                    message += '\n'
                }
            } else {
                message += '\n\n' + `# ❌ Some ${testType} tests failed

            These tests failed:` + '\n\n'
                for (let i = 0; i < notSuccess.length; i++) {
                    message += '- ' + notSuccess[i] + '\n'
                }
                message += '\n'

                if (!allFound) {
                    message += 'Additionally, some tests did not report a status:\n\n'
                    for (let i = 0; i < notFound.length; i++) {
                        message += '- ' + notFound[i] + '\n'
                    }
                    message += '\n'
                }
            }

            fs.writeFileSync('message.txt', message)

      - name: Replace PR comment
        if: env.PR_NUMBER != ''
        uses: artursouza/sticky-pull-request-comment@da9e86aa2a80e4ae3b854d251add33bd6baabcba
        with:
          header: ${{ github.run_id }}
          number: ${{ env.PR_NUMBER }}
          GITHUB_TOKEN: ${{ secrets.DAPR_BOT_TOKEN }}
          path: message.txt
