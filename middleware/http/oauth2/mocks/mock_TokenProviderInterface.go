// Code generated by MockGen. DO NOT EDIT.
// Source: oauth2_middleware.go

// Package mock_oauth2 is a generated GoMock package.
package mock_oauth2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockTokenProviderInterface is a mock of TokenProviderInterface interface.
type MockTokenProviderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenProviderInterfaceMockRecorder
}

// MockTokenProviderInterfaceMockRecorder is the mock recorder for MockTokenProviderInterface.
type MockTokenProviderInterfaceMockRecorder struct {
	mock *MockTokenProviderInterface
}

// NewMockTokenProviderInterface creates a new mock instance.
func NewMockTokenProviderInterface(ctrl *gomock.Controller) *MockTokenProviderInterface {
	mock := &MockTokenProviderInterface{ctrl: ctrl}
	mock.recorder = &MockTokenProviderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenProviderInterface) EXPECT() *MockTokenProviderInterfaceMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockTokenProviderInterface) AuthCodeURL(conf *oauth2.Config, state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{conf, state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockTokenProviderInterfaceMockRecorder) AuthCodeURL(conf, state interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{conf, state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockTokenProviderInterface)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockTokenProviderInterface) Exchange(conf *oauth2.Config, ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{conf, ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockTokenProviderInterfaceMockRecorder) Exchange(conf, ctx, code interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{conf, ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockTokenProviderInterface)(nil).Exchange), varargs...)
}
