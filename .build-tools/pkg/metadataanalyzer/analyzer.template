package main

import (
  "fmt"
  "os"
  "encoding/json"
  "strings"

	"gopkg.in/yaml.v2"

  "github.com/dapr/kit/logger"
{{range $fullpkg, $val := .Pkgs}}
	{{index $val 0}} "{{print "github.com/dapr/components-contrib/" $fullpkg}}"
{{end}}
)

func main() {
  if len(os.Args) < 2 {
    fmt.Println("Please provide the path to the components-contrib root as an argument")
    os.Exit(1)
  }
  basePath := os.Args[1]
  log := logger.NewLogger("metadata")

  var yamlMetadata *map[string]string
  var missing map[string]string
  missingByComponent := make(map[string]map[string]string)

{{range $fullpkg, $val := .Pkgs}}
	instanceOf_{{index $val 0}} := {{index $val 0}}.{{index $val 1}}(log)
	metadataFor_{{index $val 0}} := instanceOf_{{index $val 0}}.GetComponentMetadata()
	yamlMetadata = getYamlMetadata(basePath, "{{$fullpkg}}")
	missing = checkMissingMetadata(yamlMetadata, metadataFor_{{index $val 0}})
	if len(missing) > 0 {
		missingByComponent["{{$fullpkg}}"] = missing
	}
{{end}}

  jsonData, err := json.MarshalIndent(missingByComponent, "", "  ")
  if err != nil {
    fmt.Println(err)
    return
  }
  if len(missingByComponent) > 0 {
    fmt.Println("The following components are missing metadata in their metadata.yaml:\n")
    fmt.Println(string(jsonData))
    os.Exit(1)
  }
}

type Data struct {
	Metadata               []Metadata `yaml:"metadata"`
	AuthenticationProfiles []struct {
		Metadata []Metadata `yaml:"metadata"`
	} `yaml:"authenticationProfiles"`
}

type Metadata struct {
	Name string `yaml:"name"`
	Type string `yaml:"type"`
}

func getYamlMetadata(basePath string, pkg string) *map[string]string {
	metadatayamlpath := basePath + "/" + pkg + "/metadata.yaml"
	data, err := os.ReadFile(metadatayamlpath)
	if err != nil {
		return nil
	}

	var d Data
	err = yaml.Unmarshal(data, &d)
	if err != nil {
		fmt.Println(fmt.Errorf("Invalid metadata yaml format. Error unmarshalling yaml %s: %s", metadatayamlpath, err.Error()))
		os.Exit(1)
	}

	names := make(map[string]string)
	for _, m := range d.Metadata {
		names[strings.ToLower(m.Name)] = "string"
		if m.Type != "" {
			names[strings.ToLower(m.Name)] = m.Type
		}
	}
	for _, ap := range d.AuthenticationProfiles {
		for _, m := range ap.Metadata {
			names[strings.ToLower(m.Name)] = "string"
			if m.Type != "" {
				names[strings.ToLower(m.Name)] = m.Type
			}
		}
	}
	return &names
}

func checkMissingMetadata(yamlMetadataP *map[string]string, componentMetadata map[string]string) map[string]string {
	missingMetadata := make(map[string]string)
	// if there is no yaml metadata, then we are not missing anything yet
	if yamlMetadataP != nil {
		yamlMetadata := *yamlMetadataP
		for key := range componentMetadata {
			lowerKey := strings.ToLower(key)
			if _, ok := yamlMetadata[lowerKey]; !ok {
				missingMetadata[lowerKey] = componentMetadata[key]
			}
			// todo - check if the metadata is the same data type
		}
	}
	return missingMetadata
}
